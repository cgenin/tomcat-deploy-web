#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
 */
const config = require('../config');
const registry = require('simple-registry');
const inProgress = require('../in-progress');
const http = require('http');
registry.set('config', config);
const app = require('../app');
const debug = require('debug')(`${config.app.name}:server`);

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */


const server = http.createServer(app);
const io = require('socket.io')(server);

server.on('error', onError);
server.on('listening', onListening);

server.listen(port);


io.on('connection', (socket) => {
  let ip = '';
  if (socket && socket.conn && socket.conn.remoteAddress) {
    ip = socket.conn.remoteAddress;
  }
  console.log(`connection of ${ip}`);
  if (inProgress.isActive()) {
    socket.emit(inProgress.event, { active: true });
  }
  require('../ws/deploy')(socket, io, ip);
});

require('../routes')(app, io);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const tmpPort = parseInt(val, 10);

  if (isNaN(tmpPort)) {
    // named pipe
    return val;
  }

  if (tmpPort >= 0) {
    // port number
    return tmpPort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
