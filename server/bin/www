#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
 */
const config = require('../config');
const logger = require('../logger');
const registry = require('simple-registry');
const inProgress = require('../actions/in-progress');
const http = require('http');
registry.set('config', config);
const debug = require('debug')(`${config.app.name}:server`);

const opts = require('../args');
const {port} = opts;
const app = require('../app')(opts.dbpath);
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */


const server = http.createServer(app);
const io = require('socket.io')(server);

server.on('error', onError);
server.on('listening', onListening);

server.listen(port);

require('../ws/RemoteConsole').setIo(io);
io.on('connection', (socket) => {
    let ip = '';
    if (socket && socket.conn && socket.conn.remoteAddress) {
        ip = socket.conn.remoteAddress;
    }
    logger.websocketLogger.info(`connection of ${ip}`);
    if (inProgress.isActive()) {
        socket.emit(inProgress.event, {active: true});
    }
    require('../ws/deploy')(socket, io, ip);
});

require('../routes')(app, io);
//
// /**
//  * Normalize a port into a number, string, or false.
//  */
//
// function normalizePort(val) {
//     const tmpPort = parseInt(val, 10);
//
//     if (isNaN(tmpPort)) {
//         // named pipe
//         return val;
//     }
//
//     if (tmpPort >= 0) {
//         // port number
//         return tmpPort;
//     }
//
//     return false;
// }

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;
    logger.info(`Listening on ${bind}`);
}
